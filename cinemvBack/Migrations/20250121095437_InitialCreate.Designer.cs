// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace cinemvBack.Migrations
{
    [DbContext(typeof(cinemvBackContext))]
    [Migration("20250121095437_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Abonnement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuiveurId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SuiviId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SuiveurId");

                    b.HasIndex("SuiviId");

                    b.ToTable("Abonnements");
                });

            modelBuilder.Entity("Commentaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilmId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Commentaires");
                });

            modelBuilder.Entity("Favoris", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilmsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Favoris");
                });

            modelBuilder.Entity("Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("FilmsIds")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilmId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Valeur")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("cinemvBack.Models.ListeFilms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("FilmsIds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Titre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("ListeFilms");
                });

            modelBuilder.Entity("cinemvBack.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateInscription")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MotDePasse")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NomUtilisateur")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UtilisateurId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Abonnement", b =>
                {
                    b.HasOne("cinemvBack.Models.Utilisateur", "Suiveur")
                        .WithMany()
                        .HasForeignKey("SuiveurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("cinemvBack.Models.Utilisateur", "Suivi")
                        .WithMany()
                        .HasForeignKey("SuiviId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Suiveur");

                    b.Navigation("Suivi");
                });

            modelBuilder.Entity("Commentaire", b =>
                {
                    b.HasOne("cinemvBack.Models.Utilisateur", "Utilisateur")
                        .WithMany("Commentaires")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Favoris", b =>
                {
                    b.HasOne("cinemvBack.Models.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Note", b =>
                {
                    b.HasOne("cinemvBack.Models.Utilisateur", "Utilisateur")
                        .WithMany("Notes")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("cinemvBack.Models.ListeFilms", b =>
                {
                    b.HasOne("cinemvBack.Models.Utilisateur", "Utilisateur")
                        .WithMany("Listes")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("cinemvBack.Models.Utilisateur", b =>
                {
                    b.HasOne("cinemvBack.Models.Utilisateur", null)
                        .WithMany("Abonnements")
                        .HasForeignKey("UtilisateurId");
                });

            modelBuilder.Entity("cinemvBack.Models.Utilisateur", b =>
                {
                    b.Navigation("Abonnements");

                    b.Navigation("Commentaires");

                    b.Navigation("Listes");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
